x <-6
x - 3
hometown <- "Lima"
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% puppy_price
puppy_price <- "300"
total_cost <- too_expensive <- FALSE
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
total_cost <- too_expensive <- FALSE
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
total_cost <- too_expensive <- FALSE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000 %/% puppy_price
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
hometown <- "Lima"
rm(max_x)
rm(x)
# Assign your name to the variable `my_name`
my_name <- "Andre"
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Lima"
# Assign your name to the variable `my_name`
my_name <- "Andre"
# Assign your height (in inches) to a variable `my_height`
my_height <- "72"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- "2"
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- "300"
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
total_cost <- too_expensive <- FALSE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Lima"
# Assign your name to the variable `my_name`
my_name <- "Andre"
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
total_cost <- too_expensive <- FALSE
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
too expensive <- total_cost > FALSE
hometown <- "Lima"
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Lima"
# Assign your name to the variable `my_name`
my_name <- "Andre"
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Lima"
# Assign your name to the variable `my_name`
my_name <- "Andre"
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Lima"
# Assign your name to the variable `my_name`
my_name <- "Andre"
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Lima"
# Assign your name to the variable `my_name`
my_name <- "Andre"
# Assign your height (in inches) to a variable `my_height`
my_height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 2
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 300
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppy_price * puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
install.packages
print(lyric_e)
print(intro + fruits)
print(paste(intro + fruits))
print(lyric_e)
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
print(paste(intro + fruits))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub( "a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro + fruits))
rm(hometown, max_puppies, my_height, my_name)
rm(puppies)
rm(puppy_price)
rm(too_expensive, total_cost)
print(paste(intro, fruits))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric,1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub( "a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits))
grants <- read.csv('data/gates_money.csv', stringToFactors = F)
grants <- read.csv('data/gates_money.csv', stringToFactors = F)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- col("organization")
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(organization)
grants <- read.csv('data/gates_money.csv', stringAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- col("organization")
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(organization)
PWD
setwd("C:/Users/andre/Documents/Info 201/ch9-data-frames/exercise-4")
setwd("C:/Users/andre/Documents/Info 201/ch9-data-frames/exercise-4")
grants <- read.csv('data/gates_money.csv', stringAsFactors = FALSE)
grants <- read.csv('data/gates_money.csv', stringAsFactors=FALSE)
grants <- read.csv('data/gates_money.csv' stringAsFactors=FALSE)
setwd("C:/Users/andre/Documents/Info 201/ch9-data-frames/exercise-4")
grants <- read.csv('data/gates_money.csv', stringAsFactors=FALSE)
grants <- read.csv('data/gates_money.csv', stringAsFactors=FALSE)
# Use the View function to look at the loaded data
View(grants)
grants <- read.csv('data/gates_money.csv', stringAsFactors=FALSE)
grants <- read.csv("data/gates_money.csv", stringAsFactors=FALSE)
grants <- read.csv('data/gates_money.csv', stringAsFactors=FALSE)
grants <- read.csv('data/gates_money.csv', stringsAsFactors=FALSE)
grants <- read.csv('data/gates_money.csv', stringsAsFactors=FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean_spending <- mean(grants$total_amount)
